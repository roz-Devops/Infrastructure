---
  - name: Copy Configuration file
    copy:
      src: "files/database.js"
      dest: "/opt/{{ service }}/config" 
      
  #- name: "installing Docker sdk for python"
   # shell: sudo pip3 install docker
  - name: error lock
    shell: sudo apt -qy update 2>/dev/null | grep packages | cut -d '.' -f 1
  
  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
  
  - name: error lock
    shell: sudo apt -qy update 2>/dev/null | grep packages | cut -d '.' -f 1
      
  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']    

  - name: Add Docker GPG apt Key
    apt_key:
       url: https://download.docker.com/linux/ubuntu/gpg
       state: present
        
  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest
    
  - name: Install Docker Module for Python
    pip:
      name: docker
      
  - name: Start Container
    docker_container:
      name: "{{ service }}"
      image: "rozdockerforever/dev:{{ service }}_{{ service_version }}"
      pull: true
      recreate: yes
      ports:
        - "3000:3000"
      volumes:
        - "/opt/{{ service }}/config:/usr/src/app/config"
      restart_policy:
        unless-stopped
      interactive:
        no
      state:
        started
        
  #- name: Pull image from dockerhub
  #  shell: docker pull rozdockerforever/dev:{{ service }}_{{ service_version }}

  #- name: Tag dockerhub image 
  #  shell: docker tag rozdockerforever/dev:{{ service }}_{{ service_version }} {{ service }}_{{ service_version }}
     
  #- name: Run container from my image
  #  shell: docker run -d --name {{ service }} {{ service }}_{{ service_version }}
      
  - name: Save Docker Log Into Register
    shell: docker inspect --format={{ '{{.State.Running}}' }} {{ service }}
    register: docker_inspect
    
  - debug:
      var: docker_inspect.stdout
 
