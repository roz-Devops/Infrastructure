import groovy.json.JsonSlurper
import groovy.json.JsonSlurperClassic
import groovy.json.*

@NonCPS
def createBooleanParameter(String value, String desc) {
   return [$class: 'BooleanParameterDefinition', defaultValue: false, name: value, description: desc]
}
@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
pipeline {
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
   
   agent { label 'master' }
    stages {
        stage ('Checkout') {
            steps {
                script {
                    deleteDir()
                    dir ('infrastructure') {
                        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git_rd_cred', url: 'https://github.com/roz-Devops/Infrastructure.git']]])
                    } 
                }
            }
        }
        stage ('Load release json') {
            steps {
                script {
                    dir('infrastructure') {
                        releaseFile = jsonParse(readFile("release.json"))
                        releaseName = releaseFile["release"]["name"]
                        releaseVersion = releaseFile["release"]["version"]
                        infrastructureVersion = releaseFile["release"]["infrastructure_version"]
                        automationVersion = releaseFile["release"]["automation_version"]
                        envName = releaseFile["release"]["environment"]
                        //servicesList = releaseFile["release"]["services"].keySet()
                        service = "intapi"
                        println("Those Services will be deployed ${service}")
                        print("The environment is ${envName}")
                        environmentFile = jsonParse(readFile("environments.json"))
                        aws_region = environmentFile['environments']["${envName}"]['aws_region']
                        aws_vpc = environmentFile['environments']["${envName}"]['vpc_id']
                        subnet_prefix = environmentFile['environments']["${envName}"]['subnet_prefix']
                        security_group = environmentFile['environments']["${envName}"]['security_group']
                    }
                }
            }
        }
        stage ('Verify artifacts exist') {
            steps {
                script {
                        serviceVersion = releaseFile["release"]["services"]["${service}"]["version"]
                        echo (" service version is : ${serviceVersion}")
                        echo (" service service is : ${service}")
                        sh "ls /var/jenkins_home/${service}_${serviceVersion}.tar"
                        if( fileExists ("/var/jenkins_home/${service}_${serviceVersion}.tar")){
                            println("Artifact is exists : ${service}_${serviceVersion}.tar")
                        }
                	     else {    println("Artifact not exists ${service}_${serviceVersion}.tar")
                           	       currentBuild.result = 'FAILURE'
                       }
                    
               }
           }
        }
        stage ('Vaildate Instances amount') {
            steps {
                script {
                    dir ('infrastructure/terraform') {
                        int aws_currentCount = sh script: "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --region ${aws_region} --filters 'Name=instance-state-name,Values=running' 'Name=Service,Values=intapi' --output text | wc -l" , returnStdout: true
   
                        int required_ins_count = releaseFile["release"]["services"]["${service}"]['instance_count']
                            echo (" aws_currentCount : ${aws_currentCount}")
                            echo (" required_ins_count : ${required_ins_count}")
                        int instances_to_add = required_ins_count - aws_currentCount
                         if ( aws_currentCount < required_ins_count ) {
                               sh "terraform init"  
                               echo (" instances_to_add : ${instances_to_add}")
                               //     sh "terraform validate"
                               sh "terraform apply -auto-approve -var='envName=${envName}' -var='aws_vpc_id=${aws_vpc}' -var='securitygroup=${security_group}' -var='aws_region=${aws_region}' -var='count_var=${instances_to_add}' -var='serviceName=${service}' -var='serviceVersion=${serviceVersion}'"
                        }
                         else if ( aws_currentCount > required_ins_count ) {
                              // remove instances
                              def running_instances_list = sh script: "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --region ${aws_region} --filters 'Name=instance-state-name,Values=running' 'Name=Service,Values=intapi' --output text", returnStdout: true
                              echo "Lets reduce instances" 
                              def running_ins_ids = []
                              running_ins_ids = running_instances_list.split('\n')
                              echo (" instances_arr : ${running_ins_ids}")
                               
			      for ( i = aws_currentCount-1 ; i >= required_ins_count ; i--) {
                                  echo ("i : ${i}")
                                  sh "aws ec2 terminate-instances --instance-ids ${running_ins_ids[i]}"
                           	   }
                        }
                         else {
                                println("[INFO] Instnaces amount are aligned")
                        }
                        
                    
                    }
                }
            }
        }     
        stage ('Deploy Services') {
            steps {
                script {
                    dir('infrastructure/ansible') {
                        service = "intapi"

                            configVersion = releaseFile["release"]["services"]["${service}"]["configuration"]
                            dir('Configuration') {
                               checkout([$class: 'GitSCM', branches: [[name: "*/${configVersion}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git_rd_cred', url: 'https://github.com/roz-Devops/Configuration.git']]])
  
                            }
                           println "after config"
                            sh "mkdir -p ./roles/${service}/files/"
                            sh "cp ./Configuration/${service}/*.* ./roles/${service}/files/"
                            sh "cp /var/jenkins_home/${service}_${serviceVersion}.tar ./roles/${service}/files/"
                            sh "sed -i 's/REGION/${aws_region}/g' inventory.aws_ec2.yml"
                            sh "ansible-playbook -i inventory.aws_ec2.yml main.yml --extra-vars 'service=${service}' -e 'service_version=${serviceVersion}'"
                           
                        }
                    }
                }
            }
        
        stage ('Run Automation') {
            steps {
                script {
               //    service = "intapi"
                //   int container_status = sh script: "docker inspect -f '{{.State.Running}}' ${service}"
                 //  if(container_status == 0){
                 //   echo ("container  ${service} is up and running ") 
                    echo ("BYE") 
                   }
                   //    dir('automation') 
                 //   automationVersion = releaseFile["release"]["automation"]     
                  //  sh "git checkout ${automationVersion}"
                   
                    //    for ( service in service ) {
                      //       serverAddresses = releaseFile["release"]["services"]["${service}"]["servers"]   
                       //    for ( address in serverAddresses )  {   
                        //   sh "./sanity_tests.sh ${service} ${address}" }
                          //                               }
                        
                    }
                }
            }
    
  
}
